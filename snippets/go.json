{
	".source.go": {
		"type interface declaration": {
			"prefix": "tyi",
			"body": "type ${1:name} interface {\n\t$0\n}",
			"description": "Snippet for a type interface"
		},
		"type struct declaration": {
			"prefix": "tys",
			"body": "type ${1:name} struct {\n\t$0\n}",
			"description": "Snippet for a struct declaration"
		},
		"function declaration": {
			"prefix": "func",
			"body": "func $1($2) $3 {\n\t$0\n}",
			"description": "Snippet for function declaration"
		},
		"switch statement": {
			"prefix": "switch",
			"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
			"description": "Snippet for switch statement"
		},
		"select statement": {
			"prefix": "sel",
			"body": "select {\ncase ${1:condition}:\n\t$0\n}",
			"description": "Snippet for select statement"
		},
		"for statement": {
			"prefix": "for",
			"body": "for ${1:i} := 0; $1 < ${2:count}; $1${3:++} {\n\t$0\n}",
			"description": "Snippet for a for loop"
		},
		"for range statement": {
			"prefix": "forr",
			"body": "for ${1:_, }${2:var} := range ${3:var} {\n\t$0\n}",
			"description": "Snippet for a for range loop"
		},
		"if err != nil": {
			"prefix": "iferr",
			"body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
			"description": "Snippet for if err != nil"
		},
		"fmt.Println": {
			"prefix": "fp",
			"body": "fmt.Println(\"$1\")",
			"description": "Snippet for fmt.Println()"
		},
		"fmt.Printf": {
			"prefix": "ff",
			"body": "fmt.Printf(\"$1\", ${2:var})",
			"description": "Snippet for fmt.Printf()"
		},
		"log.Println": {
			"prefix": "lp",
			"body": "log.Println(\"$1\")",
			"description": "Snippet for log.Println()"
		},
		"log.Printf": {
			"prefix": "lf",
			"body": "log.Printf(\"$1\", ${2:var})",
			"description": "Snippet for log.Printf()"
		},
		"log variable content": {
			"prefix": "lv",
			"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for log.Printf() with variable content"
		},
		"t.Log": {
			"prefix": "tl",
			"body": "t.Log(\"$1\")",
			"description": "Snippet for t.Log()"
		},
		"t.Logf": {
			"prefix": "tlf",
			"body": "t.Logf(\"$1\", ${2:var})",
			"description": "Snippet for t.Logf()"
		},
		"t.Logf variable content": {
			"prefix": "tlv",
			"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for t.Logf() with variable content"
		},
		"defer statement": {
			"prefix": "df",
			"body": "defer ${1:func}($0)",
			"description": "Snippet for defer statement"
		},
		"test function": {
			"prefix": "tf",
			"body": "func Test$1(t *testing.T) {\n\t$0\n}",
			"description": "Snippet for Test function"
		},
		"benchmark function": {
			"prefix": "bf",
			"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
			"description": "Snippet for Benchmark function"
		},
		"example function": {
			"prefix": "ef",
			"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
			"description": "Snippet for Example function"
		},
		"table driven test": {
			"prefix": "tdt",
			"body": "func Test$1(t *testing.T) {\n\ttests := []struct {\n\t\tname\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tname: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
			"description": "Snippet for table driven test"
		},
		"method declaration": {
			"prefix": "meth",
			"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
			"description": "Snippet for method declaration"
		},
		"sort implementation": {
			"prefix": "sort",
			"body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
			"description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
		}
	}
}
